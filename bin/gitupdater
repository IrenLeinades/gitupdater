#!/usr/bin/env node

const { execSync } = require('child_process');
const inquirer = require('inquirer');
const fs = require('fs');
const path = require('path');
const os = require('os');

async function main() {
    // Parse command line arguments
    const args = process.argv.slice(2);
    const stashLocal = args.includes('--stashlocal');
    
    if (stashLocal) {
        console.log('🔧 Stash local mode enabled - will stash local changes before pulling');
    }
    
    // Get credentials
    const credentials = await inquirer.prompt([
        {
            type: 'input',
            name: 'username',
            message: 'Enter your Git username:',
            validate: input => input.length > 0
        },
        {
            type: 'password',
            name: 'token',
            message: 'Enter your Git token:',
            validate: input => input.length > 0
        }
    ]);

    // Create temporary credentials file
    const credentialsFile = path.join(os.tmpdir(), 'git-credentials-' + Date.now());
    fs.writeFileSync(credentialsFile, `https://${credentials.username}:${credentials.token}@github.com`);

    try {
        // Get current directory
        const currentDir = process.cwd();
        console.log(`Searching for Git repositories in: ${currentDir}`);
        console.log('This may take a moment...');

        // Find all .git directories
        const findCommand = process.platform === 'win32' 
            ? 'dir /s /b /ad .git' 
            : 'find . -type d -name ".git"';
        
        const gitDirs = execSync(findCommand, { cwd: currentDir })
            .toString()
            .split('\n')
            .filter(dir => dir.trim());

        if (gitDirs.length === 0) {
            console.log('No Git repositories found in the current directory or its subdirectories.');
            return;
        }

        // Update each repository
        for (const gitDir of gitDirs) {
            // Ensure we get the parent directory of .git, not the .git directory itself
            const repoPath = path.dirname(gitDir);
            
            // Skip if this is the current directory (to avoid updating the gitupdater itself)
            if (path.resolve(repoPath) === path.resolve(currentDir)) {
                console.log(`\nSkipping current directory: ${repoPath}`);
                continue;
            }
            
            console.log(`\nUpdating repository: ${repoPath}`);

            let pullAttempted = false;
            let updated = false;
            let lastError = null;
            while (!updated && !pullAttempted) {
                try {
                    // Configure git to use credentials
                    execSync('git config --local credential.helper store', { cwd: repoPath });
                    fs.copyFileSync(credentialsFile, path.join(os.homedir(), '.git-credentials'));

                    // If stash local mode is enabled, stash changes first
                    if (stashLocal) {
                        console.log('📦 Stashing local changes...');
                        try {
                            execSync('git add .', { cwd: repoPath });
                            execSync('git stash', { cwd: repoPath });
                            console.log('✅ Changes stashed successfully');
                        } catch (stashError) {
                            console.log('⚠️  No changes to stash or stash failed');
                        }
                    }

                    // Pull changes
                    execSync('git pull', { cwd: repoPath });
                    console.log('✅ Successfully updated');
                    updated = true;
                } catch (error) {
                    
                    // Mostrar información detallada del error
                    console.log('=== ERROR DEBUG INFO ===');
                    console.log('Error message:', error.message);
                    console.log('Error stack:', error.stack);
                    console.log('Repository path:', repoPath);
                    console.log('Current directory:', process.cwd());
                    console.log('Error code:', error.code);
                    console.log('Error signal:', error.signal);
                    console.log('Error status:', error.status);
                    console.log('Error stdout:', error.stdout);
                    console.log('Error stderr:', error.stderr);
                    console.log('========================');
                    
                    const errorMsg = error.message || '';
                    
                    if (stashLocal) {
                        // In stash local mode, if pull fails, just report the error
                        console.log('❌ Failed to update');
                        console.error(errorMsg);
                        lastError = error;
                        break;
                    } else {
                        // Original logic for detecting local changes
                        if (!pullAttempted && /would be overwritten|local changes|Your local changes to the following files would be overwritten|Please commit your changes or stash them before you merge|cannot pull with rebase: You have unstaged changes/i.test(errorMsg)) {
                            console.log('⚠️  Local changes detected. Stashing changes...');
                            try {
                                execSync('git add .', { cwd: repoPath });
                                execSync('git stash', { cwd: repoPath });
                                pullAttempted = true; // Only retry once
                                continue; // Retry pull
                            } catch (stashError) {
                                console.log('❌ Failed to stash local changes');
                                console.error(stashError.message);
                                break;
                            }
                        } else {
                            console.log('❌ Failed to update');
                            console.error(errorMsg);
                            lastError = error;
                            break;
                        }
                    }
                } finally {
                    // Clean up credentials
                    try {
                        fs.unlinkSync(path.join(os.homedir(), '.git-credentials'));
                    } catch (e) {
                        // Ignore cleanup errors
                    }
                }
            }
        }

        console.log('\nAll repositories have been processed!');
    } finally {
        // Clean up temporary credentials file
        try {
            fs.unlinkSync(credentialsFile);
        } catch (e) {
            // Ignore cleanup errors
        }
    }

    // Pause on Windows
    if (process.platform === 'win32') {
        console.log('\nPress Enter to exit...');
        await inquirer.prompt([{
            type: 'input',
            name: 'continue',
            message: ''
        }]);
    }
}

main().catch(error => {
    console.error('An error occurred:', error);
    process.exit(1);
}); 